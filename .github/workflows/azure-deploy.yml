name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, closed]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AZURE_RESOURCE_GROUP_PROD: drinks-prod-rg
  AZURE_RESOURCE_GROUP_STAGING: drinks-staging-rg
  AZURE_LOCATION: eastus2

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Container Apps (Production)
        id: deploy
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Create resource group if it doesn't exist
            az group create \
              --name ${{ env.AZURE_RESOURCE_GROUP_PROD }} \
              --location ${{ env.AZURE_LOCATION }}

            # Deploy using Bicep template
            DEPLOYMENT_OUTPUT=$(az deployment group create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP_PROD }} \
              --template-file azure/container-app.bicep \
              --parameters azure/parameters.prod.json \
              --parameters containerImage='${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest' \
              --parameters githubToken='${{ secrets.GITHUB_TOKEN_AI }}' \
              --parameters mysqlAdminPassword='${{ secrets.MYSQL_ADMIN_PASSWORD }}' \
              --query 'properties.outputs' \
              --output json)

            # Extract the URL and set as output
            URL=$(echo $DEPLOYMENT_OUTPUT | jq -r '.containerAppUrl.value')
            echo "url=$URL" >> $GITHUB_OUTPUT
            echo "‚úÖ Production deployment successful: $URL"

      - name: Generate deployment summary
        run: |
          echo "## üöÄ Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Container**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group**: \`${{ env.AZURE_RESOURCE_GROUP_PROD }}\`" >> $GITHUB_STEP_SUMMARY

  deploy-pr:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    environment:
      name: pr-${{ github.event.number }}
      url: ${{ steps.deploy.outputs.url }}
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy PR Environment
        id: deploy
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Create resource group for PR if it doesn't exist
            RG_NAME="drinks-pr-${{ github.event.number }}-rg"
            az group create \
              --name $RG_NAME \
              --location ${{ env.AZURE_LOCATION }}

            # Deploy using Bicep template with PR-specific parameters
            DEPLOYMENT_OUTPUT=$(az deployment group create \
              --resource-group $RG_NAME \
              --template-file azure/container-app.bicep \
              --parameters containerAppName="drinks-pr-${{ github.event.number }}" \
              --parameters containerAppEnvironmentName="drinks-pr-${{ github.event.number }}-env" \
              --parameters logAnalyticsWorkspaceName="drinks-pr-${{ github.event.number }}-logs" \
              --parameters containerImage='${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}' \
              --parameters environmentType='pr' \
              --parameters githubToken='${{ secrets.GITHUB_TOKEN_AI }}' \
              --parameters mysqlAdminPassword='${{ secrets.MYSQL_ADMIN_PASSWORD }}' \
              --parameters mysqlDatabaseName="drinks_pr_${{ github.event.number }}_db" \
              --parameters minReplicas=0 \
              --parameters maxReplicas=1 \
              --query 'properties.outputs' \
              --output json)

            # Extract the URL and set as output
            URL=$(echo $DEPLOYMENT_OUTPUT | jq -r '.containerAppUrl.value')
            echo "url=$URL" >> $GITHUB_OUTPUT
            echo "‚úÖ PR deployment successful: $URL"

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üçπ Preview Deployment')
            );

            const body = `## üçπ Preview Deployment

            Your PR has been deployed to Azure Container Apps!

            **üîó Preview URL**: ${{ steps.deploy.outputs.url }}
            **üì¶ Container**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}\`
            **üè∑Ô∏è Environment**: \`pr-${{ github.event.number }}\`

            > This preview environment will be automatically cleaned up when the PR is closed.

            ---
            <details>
            <summary>Deployment Details</summary>

            - **Resource Group**: \`drinks-pr-${{ github.event.number }}-rg\`
            - **Container App**: \`drinks-pr-${{ github.event.number }}\`
            - **Image Digest**: \`${{ needs.build.outputs.image-digest }}\`
            - **Deployed**: ${new Date().toISOString()}

            </details>`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Generate deployment summary
        run: |
          echo "## üçπ PR Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: PR #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Container**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group**: \`drinks-pr-${{ github.event.number }}-rg\`" >> $GITHUB_STEP_SUMMARY

  cleanup-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Clean up PR Environment
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            RG_NAME="drinks-pr-${{ github.event.number }}-rg"

            # Check if resource group exists before attempting to delete
            if az group exists --name $RG_NAME; then
              echo "üßπ Cleaning up PR environment: $RG_NAME"
              az group delete --name $RG_NAME --yes --no-wait
              echo "‚úÖ Resource group deletion initiated"
            else
              echo "‚ÑπÔ∏è Resource group $RG_NAME not found, nothing to clean up"
            fi

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const body = `## üßπ Preview Environment Cleaned Up

            The preview environment for this PR has been automatically cleaned up.

            **üóëÔ∏è Removed**: \`drinks-pr-${{ github.event.number }}-rg\`
            **‚è∞ Cleaned up**: ${new Date().toISOString()}`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

      - name: Generate cleanup summary
        run: |
          echo "## üßπ PR Environment Cleanup" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action**: Cleaned up PR #${{ github.event.number }} environment" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group**: \`drinks-pr-${{ github.event.number }}-rg\`" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: Deletion initiated" >> $GITHUB_STEP_SUMMARY
